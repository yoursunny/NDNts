import type { TrustSchemaPolicy } from "@ndn/trust-schema";
import { assert } from "@ndn/util";

import { neededFnsMap } from "./translate";

/**
 * Print user functions as ECMAScript module.
 * @param policy - Policy generated by {@link toPolicy}.
 *
 * @throws Error
 * Policy is not generated by {@link toPolicy}.
 */
export function printUserFns(policy: TrustSchemaPolicy): string {
  const neededFns = neededFnsMap.get(policy);
  assert(neededFns, "policy is not translated by toPolicy");

  const lines: string[] = [
    "import { assert } from \"@ndn/util\";",
    "/** @typedef {import(\"@ndn/packet\").Component} Component */",
  ];
  for (const [fn, nargSet] of Array.from(neededFns).toSorted(([a], [b]) => a.localeCompare(b))) {
    lines.push(
      "",
      "/**",
      ` * LVS user function ${fn}.`,
      " * @param {Component} value",
      " * @param {ReadonlyArray<Component>} args",
      " * @returns {boolean}",
      " */",
      `export function ${fn}(value, args) {`,
      `  assert([${Array.from(nargSet).toSorted((a, b) => a - b).join(", ")}].includes(args.length));`,
      "  // TODO",
      "  return false;",
      "}",
    );
  }
  return lines.join("\n");
}
